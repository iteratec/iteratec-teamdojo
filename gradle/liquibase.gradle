import org.yaml.snakeyaml.Yaml
import groovy.xml.MarkupBuilder

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath "org.yaml:snakeyaml:1.21"
    }
}

ext.getLiquibaseXml = { dimension, levels, order ->
    def timestamp = new Date().getTime()
    def setCount = 1
    def getSetId = { "${timestamp}-${setCount++}" }
    def writer = new StringWriter()
    def xml = new MarkupBuilder(writer)
    xml.databaseChangeLog(xmlns: 'http://www.liquibase.org/xml/ns/dbchangelog',
        'xmlns:ext': 'http://www.liquibase.org/xml/ns/dbchangelog-ext',
        'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance',
        'xsi:schemaLocation': '''http://www.liquibase.org/xml/ns/dbchangelog-ext
http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd
http://www.liquibase.org/xml/ns/dbchangelog
http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd''') {
        changeSet(author: 'gradle', context: '!test', id: getSetId()) {
            insert(tableName: 'dimension') {
                column(name: 'id', valueNumeric: 'nextval(\'hibernate_sequence\')')
                column(name: 'name', value: dimension.name)
            }
        }
        levels.sort { level -> order.indexOf(level.name) }
        levels.each { level ->
            changeSet(author: 'gradle', context: '!test', id: getSetId()) {
                insert(tableName: 'level') {
                    column(name: 'id', valueComputed: 'nextval(\'hibernate_sequence\')')
                    column(name: 'name', value: level.name)
                    column(name: 'dimension_id', valueComputed: "(SELECT id FROM dimension WHERE name = '${dimension.name}' LIMIT 1)")
                    column(name: 'depends_on_id', valueComputed: "(SELECT id FROM level WHERE name = '${level.dependsOn}' LIMIT 1)")
                    column(name: 'required_score', valueNumeric: 1.0)
                    column(name: 'instant_multiplier', valueNumeric: 0.0)
                    column(name: 'completion_bonus', valueNumeric: 0.0)
                }
            }
            level.fileTree.getFiles().collect { loadYaml(it) }.each { skill ->
                changeSet(author: 'gradle', context: '!test', id: getSetId()) {
                    insert(tableName: 'skill') {
                        column(name: 'id', valueComputed: 'nextval(\'hibernate_sequence\')')
                        column(name: 'title', value: skill.title.trim())
                        column(name: 'description', value: skill.why.trim())
                        column(name: 'implementation', value: skill.how.trim())
                        column(name: 'jhi_validation', value: skill.validation.trim())
                        column(name: 'score', value: 1)
                    }
                    insert(tableName: 'level_skill') {
                        column(name: 'id', valueComputed: 'nextval(\'hibernate_sequence\')')
                        column(name: 'level_id', valueComputed: "(SELECT id FROM level WHERE name ='${level.name}' LIMIT 1)")
                        column(name: 'skill_id', valueComputed: "(SELECT id FROM skill WHERE title = '${skill.title.trim()}' LIMIT 1)")
                    }
                }
            }
        }
    }
    writer.toString()
}

ext.loadYaml = { file ->
    System.out.println(file.name);
    Yaml yaml = new Yaml()
    yaml.load(file.text)
}

ext.getDependsOn = { name, order ->
    def index = order.indexOf(name);
    return index > 0 ? order[index - 1] : null;
}

task liquibaseDataImportFromYaml {
    group = 'liquibase'
    description = 'Generate changelog for data described in YAML files under \'skills/\''
    doLast {
        def order = ['yellow', 'orange', 'green', 'blue', 'brown', 'black'];
        List levelPaths = []
        new File('skills/').eachFile {
            levelPaths << it.name
        }
        List levels = levelPaths.collect {
            [
                name     : it,
                fileTree : fileTree(dir: "skills/${it}"),
                dependsOn: getDependsOn(it, order)
            ]
        }
        def xmlString = getLiquibaseXml([name: 'Security'], levels, order)
        def outputFilename = new Date().format('yyyyMMddHHmmss') + '_changelog.xml'
        new File("src/main/resources/config/liquibase/changelog/${outputFilename}").write(xmlString)
    }
}
